"""Download the latest CAIDA routeview files into a cloud bucket."""

import os
import re
from pprint import pprint

from urllib.request import urlopen
from google.cloud import storage

BUCKET_NAME = "censoredplanet_geolocation"
BUCKET_ROUTEVIEW_PATH = "caida/routeviews/"
CAIDA_ROUTEVIEW_DIR_URL = "http://data.caida.org/datasets/routing/routeviews-prefix2as/"
CAIDA_CREATION_FILE = "pfx2as-creation.log"

client = storage.Client()
caida_bucket = client.get_bucket(BUCKET_NAME)


def get_latest_generated_routeview_files():
  """Get a list of recently created files CAIDA routeview files on their server.

  Returns:
    A list of filename strings
    ex ["routeviews-rv2-20200720-1200.pfx2as.gz",
        "routeviews-rv2-20200719-1200.pfx2as.gz"]
  """
  url = CAIDA_ROUTEVIEW_DIR_URL + CAIDA_CREATION_FILE
  output = urlopen(url).read().decode("utf-8").split("\n")[:-1]

  files = []
  for line in output:
    if line[0] != "#":  # ignore comment lines
      # Line format:
      # 4492	1595262269	2020/07/routeviews-rv2-20200719-1200.pfx2as.gz
      # we only want the routeviews-rv2-20200719-1200.pfx2as.gz portion
      filename = re.findall(r".*\t.*\t\d{4}/\d{2}/(.*)", line)[0]
      files.append(filename)
  return files


def get_caida_files_in_bucket():
  """Get a list of all caida files stored in our bucket.

  Returns:
    A list of filename strings
    ex ["routeviews-rv2-20200720-1200.pfx2as.gz",
        "routeviews-rv2-20200719-1200.pfx2as.gz"]
  """
  blobs = list(client.list_blobs(BUCKET_NAME))
  filenames = [os.path.basename(blob.name) for blob in blobs]
  return filenames


def diff_new_caida_files(latest_files, existing_files):
  """Get a diff list of any new files CAIDA has generated we don't already have.

  If latest_files is ['1','2','3']
  and existing_files is ['2','3','4']
  return ['1']

  Args:
    latest_files: list of filenames, the latest files generated by CAIDA
    existing_files: a list of filenames, files already in our bucket

  Returns:
    A list of any files that are in latest_files but not existing_files.
    This list will be empty if there are no new files.
  """
  diff = set(latest_files) - set(existing_files)
  return list(diff)


def transfer_new_file(filename):
  """Transfer a routeview file into the cloud bucket.

  Args:
    filename: string of the format "routeviews-rv2-20200720-1200.pfx2as.gz"
  """
  year = filename[15:19]
  month = filename[19:21]

  url = CAIDA_ROUTEVIEW_DIR_URL + year + "/" + month + "/" + filename

  output = urlopen(url).read()

  output_blob = caida_bucket.blob(os.path.join(BUCKET_ROUTEVIEW_PATH, filename))
  output_blob.upload_from_string(output)


def transfer_routeviews():
  """Look for new routeview files and transfer them into the cloud bucket."""
  latest_files = get_latest_generated_routeview_files()
  existing_files = get_caida_files_in_bucket()
  new_files = diff_new_caida_files(latest_files, existing_files)

  if not new_files:
    pprint("no new CAIDA files to transfer")

  for new_file in new_files:
    pprint(("transferring file: ", new_file))
    transfer_new_file(new_file)
    pprint(("transferred file: ", new_file))
